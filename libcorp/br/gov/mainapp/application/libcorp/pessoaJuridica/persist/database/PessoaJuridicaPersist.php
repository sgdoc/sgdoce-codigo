<?php
/*
 * Copyright 2011 ICMBio
 * Este arquivo é parte do programa SISICMBio
 * O SISICMBio é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro dos termos
 * da Licença Pública Geral GNU como publicada pela Fundação do Software Livre (FSF); na versão
 * 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
 * Licença Pública Geral GNU/GPL em português para maiores detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título "LICENCA.txt",
 * junto com este programa, se não, acesse o Portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para a Fundação do Software Livre(FSF)
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA
 * */
namespace br\gov\mainapp\application\libcorp\pessoaJuridica\persist\database;
use br\gov\sial\core\persist\database\Persist as ParentPersist,
    br\gov\mainapp\application\libcorp\pessoa\valueObject\PessoaValueObject,
    br\gov\mainapp\application\libcorp\pessoaJuridica\valueObject\PessoaJuridicaValueObject;

/**
  * SISICMBio
  *
  * Generated By SIAL Generator - vs 0.2.0
  *
  * @name PessoaJuridicaPersist
  * @package br.gov.mainapp.application.libcorp.pessoaJuridica.persist
  * @subpackage database
  * @author Fabio Lima <fabioolima@gmail.com>
  * @author J. Augusto <augustowebd@gmail.com>
  * @version $Id$
  * */
class PessoaJuridicaPersist extends ParentPersist
{
    /**
     * @param PessoaJuridica $voUnidOrg
     * @param integer $limit
     * @param integer $offset
     * @return UnidadeOrgModel
     * */
    public function findByParamFilterByName (PessoaValueObject $voPessoa, $limit = 10, $offset = 0)
    {
        # cria entidade de banco do VO informado
         $ePessoaJuridica = $this->getEntity(array('ps' => PessoaJuridicaValueObject::factory()));
         $ePessoa         = $this->getEntity($voPessoa);

         # cria consulta
         $query = $this->getQuery($ePessoa)
                       ->join($ePessoaJuridica, $ePessoaJuridica->column('sqPessoa')->equals($ePessoa->column('sqPessoa')))
                       ->where($ePessoa->column('noPessoa')->ilike($voPessoa->getNoPessoa() . '%'))
                       ->limit($limit, $offset);

        try {
            return $this->execute($query);
        } catch (PersistException $pExc) {
            # efetua log de erro
           ;
            throw new ModelException(self::REQUIRE_DATA_ERROR_MESSAGE);
        }
    }

    /**
     * @param string $voPessoaJuridica
     * @return PessoaJuridicaModel
     * */
    public function findByCnpj  ($nuCnpj)
    {
         $ePessoaJuridica = $this->getEntity(array('ps' => PessoaJuridicaValueObject::factory()));
         $ePessoa = $this->getEntity(PessoaValueObject::factory());

         # cria consulta
         $query = $this->getQuery($ePessoa)
                       ->join($ePessoaJuridica, $ePessoaJuridica->column('sqPessoa')->equals($ePessoa->column('sqPessoa')))
                       ->where($ePessoaJuridica->column('nuCnpj')->like($nuCnpj . '%'));

        try {
            return $this->execute($query);
        } catch (PersistException $pExc) {
            # efetua log de erro ;
            throw new ModelException(self::REQUIRE_DATA_ERROR_MESSAGE);
        }
    }
}
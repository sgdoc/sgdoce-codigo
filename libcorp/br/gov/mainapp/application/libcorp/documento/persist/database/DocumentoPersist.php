<?php
/*
 * Copyright 2011 ICMBio
 * Este arquivo é parte do programa SISICMBio
 * O SISICMBio é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro dos termos
 * da Licença Pública Geral GNU como publicada pela Fundação do Software Livre (FSF); na versão
 * 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
 * Licença Pública Geral GNU/GPL em português para maiores detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título "LICENCA.txt",
 * junto com este programa, se não, acesse o Portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para a Fundação do Software Livre(FSF)
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA
 * */
namespace br\gov\mainapp\application\libcorp\documento\persist\database;
use
    br\gov\sial\core\persist\query\Column,
    br\gov\sial\core\persist\query\Expression,
    br\gov\sial\core\persist\exception\PersistException,
    br\gov\sial\core\persist\database\Persist as ParentPersist,
    br\gov\mainapp\application\libcorp\pessoa\valueObject\PessoaValueObject,
    br\gov\mainapp\application\libcorp\documento\valueObject\DocumentoValueObject,
    br\gov\mainapp\application\libcorp\tipoDocumento\valueObject\TipoDocumentoValueObject,
    br\gov\mainapp\application\libcorp\atributoDocumento\valueObject\AtributoDocumentoValueObject,
    br\gov\mainapp\application\simac\agenteFiscalizacao\valueObject\VwSicaConfiguracaoValueObject,
    br\gov\mainapp\application\libcorp\atributoTipoDocumento\valueObject\AtributoTipoDocumentoValueObject
    ;

/**
  * SISICMBio
  *
  * Generated By SIAL Generator - vs 0.2.0
  *
  * @name DocumentoPersist
  * @package br.gov.icmbio.sisicmbio.application.libcorp.documento.persist
  * @subpackage database
  * @author Fabio Lima <fabioolima@gmail.com>
  * @author J. Augusto <augustowebd@gmail.com>
  * @version $Id$
  * */
class DocumentoPersist extends ParentPersist
{
    /**
     * Retorna Documentos por Pessoa
     * @param PessoaValueObject $voPessoa
     * @throws PersistException
     */
    public function findByPessoa (PessoaValueObject $voPessoa)
    {
        try {
            /*
             * SELECT pe.sq_pessoa,
             *        do.tx_valor,
             *        ad.no_atributo_documento,
             *        td.no_tipo_documento
             * FROM   corporativo.pessoa AS pe
             * INNER JOIN corporativo.documento AS do ON do.sq_pessoa = pe.sq_pessoa
             * INNER JOIN corporativo.atributo_tipo_documento AS atd ON atd.sq_atributo_documento = do.sq_atributo_tipo_documento
             * INNER JOIN corporativo.atributo_documento AS ad ON ad.sq_atributo_documento = atd.sq_atributo_documento
             * INNER JOIN corporativo.tipo_documento AS td ON td.sq_tipo_documento = atd.sq_tipo_documento
             * WHERE (pe.sq_pessoa = :sq_pessoa);
             */
            # obtem a entidade com base na anotacao
            $eDocumento         = $this->getEntity(array('doc' => $this->annotation()->load()->class));

            # cria entidade Pessoa
            $ePessoa            = $this->getEntity(array('pes' => PessoaValueObject::factory()));

            # cria entidade AtributoTipoDocumento
            $eAtributoTipoDoc   = $this->getEntity(array('atd' => AtributoTipoDocumentoValueObject::factory()));

            # cria entidade AtributoDocumento
            $eAtributoDocumento = $this->getEntity(array('ado' => AtributoDocumentoValueObject::factory()));

            # cria entidade TipoDocumento
            $eTipoDocumento     = $this->getEntity(array('tdo' => TipoDocumentoValueObject::factory()));

             # cria objeto de consulta baseando-se em AttrTipoDoc
            $query  = $this->getQuery($ePessoa)

                # efetua join de bioma com biomaMunicipio
                ->join($eDocumento, $ePessoa->column('sqPessoa')->equals($eDocumento->column('sqPessoa')))

                ->join($eAtributoTipoDoc, $eDocumento->column('sqAtributoTipoDocumento')
                                                     ->equals($eAtributoTipoDoc->column('sqAtributoTipoDocumento')))

                ->join($eAtributoDocumento, $eAtributoTipoDoc->column('sqAtributoDocumento')
                                                             ->equals($eAtributoDocumento
                                                             ->column('sqAtributoDocumento')))

                ->join($eTipoDocumento, $eAtributoTipoDoc->column('sqTipoDocumento')
                                                         ->equals($eTipoDocumento->column('sqTipoDocumento')))

                # aplica filtro
                ->where($ePessoa->column('sqPessoa')->equals($voPessoa->getSqPessoa()))
            ;

            return $this->execute($query);
        } catch (\Exception $excp) {
            throw new PersistException($excp->getMessage());
        }
    }

    /**
     * @param PessoaValueObject $valueObject
     * @param string $constantName
     * @return ResultSet
     * */
    public function findDocumentOrPropertyByPessoa (PessoaValueObject $valueObject, $constantName = NULL)
    {
        /* @todo criar query quando o SICA for de responsabilidade da cotec */
        $query = 'SELECT pe.sq_pessoa,
                         doc.tx_valor,
                         att_doc.no_atributo_documento,
                         tp_doc.no_tipo_documento,
                         tp_doc.sq_tipo_documento
                    FROM corporativo.documento doc
              INNER JOIN corporativo.atributo_tipo_documento att_tp_doc ON att_tp_doc.sq_atributo_tipo_documento = doc.sq_atributo_tipo_documento
              INNER JOIN corporativo.tipo_documento tp_doc              ON tp_doc.sq_tipo_documento = att_tp_doc.sq_tipo_documento
              INNER JOIN corporativo.atributo_documento att_doc         ON att_doc.sq_atributo_documento = att_tp_doc.sq_atributo_documento
              INNER JOIN corporativo.pessoa pe                          ON pe.sq_pessoa = doc.sq_pessoa ';

        if (NULL != $constantName) {
            $query .= sprintf("INNER JOIN sicae.configuracao conf ON conf.no_constante = '%s' AND att_doc.sq_atributo_documento  = conf.sq_valor ", $constantName);
        }

        $query .= 'WHERE pe.sq_pessoa = :sqPessoa';

        $params['sqPessoa']        = new \stdClass();
        $params['sqPessoa']->type  = 'integer';
        $params['sqPessoa']->value = $valueObject->getSqPessoa();

        return $this->execute($query, $params);
    }

    /**
     * recupera todos os atributos que compoem um determinado documento,
     * filtrando-o por uma das porpiedades do proprio documento.
     *
     * supondo que o documento seja composto pelos atributos: a,b,c e d,
     * este metodo recupera todos os atributos informando em deles
     *
     * @param integer $sqpessoa
     * @param integer $sqDocumento
     * @return ResultSet
     * */
    public function findAtributosDocumento (DocumentoValueObject $documento)
    {
        $query = 'SELECT tipDoc.sq_tipo_documento,
                         doc.sq_documento,
                         tipDoc.no_tipo_documento,
                         doc.tx_valor,
                         attr.no_atributo_documento
                    FROM corporativo.documento AS doc
              INNER JOIN corporativo.atributo_tipo_documento AS attrtipDoc ON doc.sq_atributo_tipo_documento = attrtipDoc.sq_atributo_tipo_documento
              INNER JOIN corporativo.tipo_documento          AS tipDoc     ON attrtipDoc.sq_tipo_documento = tipDoc.sq_tipo_documento
              INNER JOIN corporativo.atributo_documento      AS attr       ON attrtipDoc.sq_atributo_documento = attr.sq_atributo_documento
                   WHERE tipDoc.sq_tipo_documento = (
                       SELECT sub_attr_tip_doc.sq_tipo_documento
                         FROM corporativo.documento AS sub_doc
                   INNER JOIN corporativo.atributo_tipo_documento AS sub_attr_tip_doc ON sub_doc.sq_atributo_tipo_documento = sub_attr_tip_doc.sq_atributo_tipo_documento
                        WHERE sub_doc.sq_documento = :sqDocumento)
                    AND doc.sq_pessoa = :sqPessoa';

        # dono do documento
        $params['sqPessoa']        = new \stdClass();
        $params['sqPessoa']->type  = 'integer';
        $params['sqPessoa']->value = $documento->getSqPessoa()->getSqPessoa();

        # id do documento
        $params['sqDocumento']        = new \stdClass();
        $params['sqDocumento']->type  = 'integer';
        $params['sqDocumento']->value = $documento->getSqDocumento();

        return $this->execute($query, $params);
    }
}
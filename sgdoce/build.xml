<?xml version="1.0" encoding="UTF-8"?>
<project name="SGDoce" default="build" basedir=".">
    <property name="build_dir" value="${basedir}/build" />
    <property name="source_code_app"  value="${basedir}/application" />
    <target name="composer" description="Install dependencies with Composer">
        <delete>
            <fileset dir="${basedir}">
                <include name="composer.phar" />
            </fileset>
        </delete>
        <!--    <delete dir="vendor/" />
        <delete file="composer.lock" />-->
        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/composer.phar" skipexisting="true"/>
        <chmod file="${basedir}/composer.phar" perm="775" />
        <chmod file="${basedir}/data/**" perm="0777" type="both"/>        
        <chmod file="${basedir}/public/**" perm="0777" type="both"/>
        <exec executable="php">
            <arg value="${basedir}/composer.phar"/>
            <arg value="install"/>
        </exec>        
        <chmod file="${basedir}/vendor/**" perm="0777" type="both"/>
    </target>

    <target name="clean" description="Clean up and create artifact directories">
        
        <delete dir="${build_dir}/code-browser" />
        <delete dir="${build_dir}/php-selenium-logs" />
        <delete dir="${build_dir}/pdepend" />
        <delete dir="${build_dir}/logs" />
        <delete dir="${build_dir}/coverage" />
        <delete dir="${build_dir}/screenshot" />
        <delete dir="${build_dir}/api" />
        <delete dir="${build_dir}/PHPCS" />        

        <mkdir dir="${build_dir}/code-browser" />
        <mkdir dir="${build_dir}/php-selenium-logs" />
        <mkdir dir="${build_dir}/pdepend" />
        <mkdir dir="${build_dir}/logs" />
        <mkdir dir="${build_dir}/coverage" />
        <mkdir dir="${build_dir}/coverage/report" />
        <mkdir dir="${build_dir}/screenshot" />        
        <mkdir dir="${build_dir}/api" />
        <mkdir dir="${build_dir}/PHPCS" />
		
        <chmod dir="${build_dir}/php-selenium-logs" perm="0777" />
        <chmod dir="${build_dir}/code-browser" perm="0777" />
        <chmod dir="${build_dir}/pdepend" perm="0777" />
        <chmod dir="${build_dir}/logs" perm="0777" />
        <chmod dir="${build_dir}/coverage" perm="0777" />
        <chmod dir="${build_dir}/coverage/report" perm="0777" />
        <chmod dir="${build_dir}/screenshot" perm="0777" />
        <chmod dir="${build_dir}/api" perm="0777" />
        <chmod dir="${build_dir}/PHPCS" perm="0777" />
        
    </target>
    
    <target name="build"
            depends="prepare,composer,lint,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpunit,phpcb"/>

    <!-- phploc,-->
    <target name="build-parallel"
            depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel"
            description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
        </parallel>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
    </target>



    <target name="lint">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/application/modules/">
                <include name="**/*.php" />
            </fileset>
        </apply>
    </target>
    
    <target name="phploc" description="Generate phploc.csv">
        <exec executable="${basedir}/vendor/bin/phploc">
            <arg line="--log-csv ${build_dir}/logs/phploc.csv ${basedir}" />
        </exec>
    </target>    

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${basedir}/vendor/bin/pdepend">
            <arg value="--jdepend-xml=${build_dir}/pdepend/jdepend.xml" />
            <arg value="--jdepend-chart=${build_dir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${build_dir}/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/application/modules/" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD">
        <exec executable="${basedir}/vendor/bin/phpmd">
            <arg path="${basedir}/application/modules/" />
            <arg value="text" />
            <arg value="${basedir}/build/scripts/resources/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD">
        <exec executable="${basedir}/vendor/bin/phpmd">
            <arg path="${basedir}/application/modules/" />
            <arg value="xml" />
            <arg value="${basedir}/build/scripts/resources/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${build_dir}/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Generate checkstyle.xml using PHP_CodeSniffer">
        <exec executable="${basedir}/vendor/bin/phpcs" output="${build_dir}/logs/checkstyle.xml">
            <arg line="--report=checkstyle
                       --extensions=php
                       --ignore=build,library/,tests,docs,data, application/models/entity
                       --standard=${basedir}/build/scripts/resources/phpcs-0.0.2.xml
                       ${basedir}" />
        </exec>
    </target>
       

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer">
        <exec executable="${basedir}/vendor/bin/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${build_dir}/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/scripts/resources/phpcs-0.0.2.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=Autoload.php" />
            <arg path="${basedir}/application/modules/" />
        </exec>
    </target>

    <target name="phpcpd" description="Generate pmd-cpd.xml using PHPCPD">
        <exec executable="${basedir}/vendor/bin/phpcpd">
            <arg line="--log-pmd ${build_dir}/logs/pmd-cpd.xml
                       --min-lines 5
                       --min-tokens 70
                       --exclude build,library,tests,docs,data, application/models/entity/
                       --suffixes php ${basedir}" />
        </exec>
    </target>

    <target name="phpunit" depends="clean" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit" failonerror="true">
            <arg line="--configuration ${basedir}/tests/phpunit.xml"/>
        </exec>
    </target>
    
    <target name="phpcb"
            description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${basedir}/vendor/bin/phpcb">
            <arg line="--log ${build_dir}/logs
                    --ignore build,library/,tests,docs,data, application/models/entity/
                    --source ${basedir}
                    --output ${build_dir}/code-browser" />
        </exec>
    </target>

    <target name="regenerate-dummy-coverage-data">
        <exec passthru="true" command="
         rm -f Tests/Selenium2TestCase/Coverage/singleFile.php.*.dummyTestId;
         php Tests/Selenium2TestCase/Coverage/singleFile.php;
         coverageFile=$(basename Tests/Selenium2TestCase/Coverage/singleFile.php.*.dummyTestId);
         php Tests/Selenium2TestCase/Coverage/singleFileCoverage.php $coverageFile > selenium-1-tests/coverage/dummy.txt;
         " />
    </target>

</project>
